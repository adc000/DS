State 17 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 52 conflicts: 8 shift/reduce
State 56 conflicts: 8 shift/reduce
State 57 conflicts: 8 shift/reduce
State 58 conflicts: 8 shift/reduce
State 88 conflicts: 8 shift/reduce
State 89 conflicts: 8 shift/reduce
State 106 conflicts: 10 shift/reduce
State 107 conflicts: 10 shift/reduce
State 109 conflicts: 8 shift/reduce
State 131 conflicts: 1 shift/reduce
State 134 conflicts: 10 shift/reduce
State 135 conflicts: 10 shift/reduce
State 136 conflicts: 10 shift/reduce
State 137 conflicts: 10 shift/reduce
State 138 conflicts: 10 shift/reduce
State 139 conflicts: 10 shift/reduce
State 140 conflicts: 10 shift/reduce
State 141 conflicts: 10 shift/reduce
State 142 conflicts: 10 shift/reduce
State 143 conflicts: 10 shift/reduce
State 149 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DECLARATION FUNCTION
    2        | DECLARATION
    3        | FUNCTION

    4 DECLARATION: INT IDENTIFIER ';' DECLARATION
    5            | FLOAT IDENTIFIER ';' DECLARATION
    6            | INT IDENTIFIER ';'
    7            | FLOAT IDENTIFIER ';'

    8 IDENTIFIER: ID '[' INTNUM ']' ',' IDENTIFIER
    9           | ID ',' IDENTIFIER
   10           | ID '[' INTNUM ']'
   11           | ID

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER ')' COMPOUNDSTMT
   14         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT
   16         | INT ID '(' ')' COMPOUNDSTMT FUNCTION
   17         | INT ID '(' ')' COMPOUNDSTMT
   18         | FLOAT ID '(' ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT ID '(' ')' COMPOUNDSTMT

   20 PARAMETER: INT IDENTIFIER PARAMETER
   21          | INT IDENTIFIER

   22 COMPOUNDSTMT: '{' DECLARATION STMT '}'
   23             | '{' STMT '}'
   24             | '{' DECLARATION '}'
   25             | '{' '}'

   26 STMT: ASSIGN ';' STMT
   27     | ASSIGN ';'
   28     | CALL ';' STMT
   29     | CALL ';'
   30     | RETURN EXPR ';' STMT
   31     | RETURN EXPR ';'
   32     | WHILE_S STMT
   33     | WHILE_S
   34     | FOR_S STMT
   35     | FOR_S
   36     | IF_S STMT
   37     | IF_S
   38     | COMPOUNDSTMT STMT
   39     | COMPOUNDSTMT
   40     | ';'

   41 ASSIGN: ID '[' EXPR ']' '=' EXPR
   42       | ID '=' EXPR

   43 CALL: ID '(' ARG ')' ';'
   44     | ID '(' ')' ';'

   45 ARG: EXPR ',' ARG
   46    | EXPR

   47 WHILE_S: DO COMPOUNDSTMT WHILE '(' EXPR ')' ';'
   48        | WHILE '(' EXPR ')' STMT

   49 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT

   50 IF_S: IF '(' EXPR ')' STMT ELSE STMT
   51     | IF '(' EXPR ')' STMT

   52 EXPR: UNOP
   53     | ADDIOP
   54     | MULTOP
   55     | RELAOP
   56     | EQLTOP
   57     | CALL
   58     | '(' EXPR ')'
   59     | ID_S
   60     | INTNUM
   61     | FLOATNUM

   62 UNOP: UNARY EXPR

   63 ADDIOP: EXPR '+' EXPR
   64       | EXPR '-' EXPR

   65 MULTOP: EXPR '*' EXPR
   66       | EXPR '/' EXPR

   67 RELAOP: EXPR '>' EXPR
   68       | EXPR '<' EXPR
   69       | EXPR ">=" EXPR
   70       | EXPR "<=" EXPR

   71 EQLTOP: EXPR "==" EXPR
   72       | EXPR "!=" EXPR

   73 ID_S: ID EXPR
   74     | ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12 13 14 15 16 17 18 19 43 44 47 48 49 50 51 58
')' (41) 12 13 14 15 16 17 18 19 43 44 47 48 49 50 51 58
'*' (42) 65
'+' (43) 63
',' (44) 8 9 45
'-' (45) 64
'/' (47) 66
';' (59) 4 5 6 7 26 27 28 29 30 31 40 43 44 47 49
'<' (60) 68
'=' (61) 41 42
'>' (62) 67
'[' (91) 8 10 41
']' (93) 8 10 41
'{' (123) 22 23 24 25
'}' (125) 22 23 24 25
error (256)
INTNUM (258) 8 10 60
FLOATNUM (259) 61
ID (260) 8 9 10 11 12 13 14 15 16 17 18 19 41 42 43 44 73 74
INT (261) 4 6 12 13 16 17 20 21
FLOAT (262) 5 7 14 15 18 19
FOR (263) 49
WHILE (264) 47 48
IF (265) 50 51
ELSE (266) 50
DO (267) 47
RETURN (268) 30 31
UNARY (269) 62
">=" (270) 69
"<=" (271) 70
"==" (272) 71
"!=" (273) 72


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
PROGRAM (35)
    on left: 1 2 3, on right: 0
DECLARATION (36)
    on left: 4 5 6 7, on right: 1 2 4 5 22 24
IDENTIFIER (37)
    on left: 8 9 10 11, on right: 4 5 6 7 8 9 20 21
FUNCTION (38)
    on left: 12 13 14 15 16 17 18 19, on right: 1 3 12 14 16 18
PARAMETER (39)
    on left: 20 21, on right: 12 13 14 15 20
COMPOUNDSTMT (40)
    on left: 22 23 24 25, on right: 12 13 14 15 16 17 18 19 38 39 47
STMT (41)
    on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40, on right:
    22 23 26 28 30 32 34 36 38 48 49 50 51
ASSIGN (42)
    on left: 41 42, on right: 26 27 49
CALL (43)
    on left: 43 44, on right: 28 29 57
ARG (44)
    on left: 45 46, on right: 43 45
WHILE_S (45)
    on left: 47 48, on right: 32 33
FOR_S (46)
    on left: 49, on right: 34 35
IF_S (47)
    on left: 50 51, on right: 36 37
EXPR (48)
    on left: 52 53 54 55 56 57 58 59 60 61, on right: 30 31 41 42 45
    46 47 48 49 50 51 58 62 63 64 65 66 67 68 69 70 71 72 73
UNOP (49)
    on left: 62, on right: 52
ADDIOP (50)
    on left: 63 64, on right: 53
MULTOP (51)
    on left: 65 66, on right: 54
RELAOP (52)
    on left: 67 68 69 70, on right: 55
EQLTOP (53)
    on left: 71 72, on right: 56
ID_S (54)
    on left: 73 74, on right: 59


State 0

    0 $accept: . PROGRAM $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2

    PROGRAM      go to state 3
    DECLARATION  go to state 4
    FUNCTION     go to state 5


State 1

    4 DECLARATION: INT . IDENTIFIER ';' DECLARATION
    6            | INT . IDENTIFIER ';'
   12 FUNCTION: INT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT . ID '(' PARAMETER ')' COMPOUNDSTMT
   16         | INT . ID '(' ')' COMPOUNDSTMT FUNCTION
   17         | INT . ID '(' ')' COMPOUNDSTMT

    ID  shift, and go to state 6

    IDENTIFIER  go to state 7


State 2

    5 DECLARATION: FLOAT . IDENTIFIER ';' DECLARATION
    7            | FLOAT . IDENTIFIER ';'
   14 FUNCTION: FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT
   18         | FLOAT . ID '(' ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT . ID '(' ')' COMPOUNDSTMT

    ID  shift, and go to state 8

    IDENTIFIER  go to state 9


State 3

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 10


State 4

    1 PROGRAM: DECLARATION . FUNCTION
    2        | DECLARATION .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 2 (PROGRAM)

    FUNCTION  go to state 13


State 5

    3 PROGRAM: FUNCTION .

    $default  reduce using rule 3 (PROGRAM)


State 6

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .
   12 FUNCTION: INT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID . '(' PARAMETER ')' COMPOUNDSTMT
   16         | INT ID . '(' ')' COMPOUNDSTMT FUNCTION
   17         | INT ID . '(' ')' COMPOUNDSTMT

    '['  shift, and go to state 14
    ','  shift, and go to state 15
    '('  shift, and go to state 16

    $default  reduce using rule 11 (IDENTIFIER)


State 7

    4 DECLARATION: INT IDENTIFIER . ';' DECLARATION
    6            | INT IDENTIFIER . ';'

    ';'  shift, and go to state 17


State 8

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .
   14 FUNCTION: FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT
   18         | FLOAT ID . '(' ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT ID . '(' ')' COMPOUNDSTMT

    '['  shift, and go to state 14
    ','  shift, and go to state 15
    '('  shift, and go to state 18

    $default  reduce using rule 11 (IDENTIFIER)


State 9

    5 DECLARATION: FLOAT IDENTIFIER . ';' DECLARATION
    7            | FLOAT IDENTIFIER . ';'

    ';'  shift, and go to state 19


State 10

    0 $accept: PROGRAM $end .

    $default  accept


State 11

   12 FUNCTION: INT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT . ID '(' PARAMETER ')' COMPOUNDSTMT
   16         | INT . ID '(' ')' COMPOUNDSTMT FUNCTION
   17         | INT . ID '(' ')' COMPOUNDSTMT

    ID  shift, and go to state 20


State 12

   14 FUNCTION: FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT . ID '(' PARAMETER ')' COMPOUNDSTMT
   18         | FLOAT . ID '(' ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT . ID '(' ')' COMPOUNDSTMT

    ID  shift, and go to state 21


State 13

    1 PROGRAM: DECLARATION FUNCTION .

    $default  reduce using rule 1 (PROGRAM)


State 14

    8 IDENTIFIER: ID '[' . INTNUM ']' ',' IDENTIFIER
   10           | ID '[' . INTNUM ']'

    INTNUM  shift, and go to state 22


State 15

    9 IDENTIFIER: ID ',' . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 24


State 16

   12 FUNCTION: INT ID '(' . PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' . PARAMETER ')' COMPOUNDSTMT
   16         | INT ID '(' . ')' COMPOUNDSTMT FUNCTION
   17         | INT ID '(' . ')' COMPOUNDSTMT

    INT  shift, and go to state 25
    ')'  shift, and go to state 26

    PARAMETER  go to state 27


State 17

    4 DECLARATION: INT IDENTIFIER ';' . DECLARATION
    6            | INT IDENTIFIER ';' .

    INT    shift, and go to state 28
    FLOAT  shift, and go to state 29

    INT       [reduce using rule 6 (DECLARATION)]
    FLOAT     [reduce using rule 6 (DECLARATION)]
    $default  reduce using rule 6 (DECLARATION)

    DECLARATION  go to state 30


State 18

   14 FUNCTION: FLOAT ID '(' . PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' . PARAMETER ')' COMPOUNDSTMT
   18         | FLOAT ID '(' . ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT ID '(' . ')' COMPOUNDSTMT

    INT  shift, and go to state 25
    ')'  shift, and go to state 31

    PARAMETER  go to state 32


State 19

    5 DECLARATION: FLOAT IDENTIFIER ';' . DECLARATION
    7            | FLOAT IDENTIFIER ';' .

    INT    shift, and go to state 28
    FLOAT  shift, and go to state 29

    INT       [reduce using rule 7 (DECLARATION)]
    FLOAT     [reduce using rule 7 (DECLARATION)]
    $default  reduce using rule 7 (DECLARATION)

    DECLARATION  go to state 33


State 20

   12 FUNCTION: INT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   13         | INT ID . '(' PARAMETER ')' COMPOUNDSTMT
   16         | INT ID . '(' ')' COMPOUNDSTMT FUNCTION
   17         | INT ID . '(' ')' COMPOUNDSTMT

    '('  shift, and go to state 16


State 21

   14 FUNCTION: FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID . '(' PARAMETER ')' COMPOUNDSTMT
   18         | FLOAT ID . '(' ')' COMPOUNDSTMT FUNCTION
   19         | FLOAT ID . '(' ')' COMPOUNDSTMT

    '('  shift, and go to state 18


State 22

    8 IDENTIFIER: ID '[' INTNUM . ']' ',' IDENTIFIER
   10           | ID '[' INTNUM . ']'

    ']'  shift, and go to state 34


State 23

    8 IDENTIFIER: ID . '[' INTNUM ']' ',' IDENTIFIER
    9           | ID . ',' IDENTIFIER
   10           | ID . '[' INTNUM ']'
   11           | ID .

    '['  shift, and go to state 14
    ','  shift, and go to state 15

    $default  reduce using rule 11 (IDENTIFIER)


State 24

    9 IDENTIFIER: ID ',' IDENTIFIER .

    $default  reduce using rule 9 (IDENTIFIER)


State 25

   20 PARAMETER: INT . IDENTIFIER PARAMETER
   21          | INT . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 35


State 26

   16 FUNCTION: INT ID '(' ')' . COMPOUNDSTMT FUNCTION
   17         | INT ID '(' ')' . COMPOUNDSTMT

    '{'  shift, and go to state 36

    COMPOUNDSTMT  go to state 37


State 27

   12 FUNCTION: INT ID '(' PARAMETER . ')' COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER . ')' COMPOUNDSTMT

    ')'  shift, and go to state 38


State 28

    4 DECLARATION: INT . IDENTIFIER ';' DECLARATION
    6            | INT . IDENTIFIER ';'

    ID  shift, and go to state 23

    IDENTIFIER  go to state 7


State 29

    5 DECLARATION: FLOAT . IDENTIFIER ';' DECLARATION
    7            | FLOAT . IDENTIFIER ';'

    ID  shift, and go to state 23

    IDENTIFIER  go to state 9


State 30

    4 DECLARATION: INT IDENTIFIER ';' DECLARATION .

    $default  reduce using rule 4 (DECLARATION)


State 31

   18 FUNCTION: FLOAT ID '(' ')' . COMPOUNDSTMT FUNCTION
   19         | FLOAT ID '(' ')' . COMPOUNDSTMT

    '{'  shift, and go to state 36

    COMPOUNDSTMT  go to state 39


State 32

   14 FUNCTION: FLOAT ID '(' PARAMETER . ')' COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER . ')' COMPOUNDSTMT

    ')'  shift, and go to state 40


State 33

    5 DECLARATION: FLOAT IDENTIFIER ';' DECLARATION .

    $default  reduce using rule 5 (DECLARATION)


State 34

    8 IDENTIFIER: ID '[' INTNUM ']' . ',' IDENTIFIER
   10           | ID '[' INTNUM ']' .

    ','  shift, and go to state 41

    $default  reduce using rule 10 (IDENTIFIER)


State 35

   20 PARAMETER: INT IDENTIFIER . PARAMETER
   21          | INT IDENTIFIER .

    INT  shift, and go to state 25

    $default  reduce using rule 21 (PARAMETER)

    PARAMETER  go to state 42


State 36

   22 COMPOUNDSTMT: '{' . DECLARATION STMT '}'
   23             | '{' . STMT '}'
   24             | '{' . DECLARATION '}'
   25             | '{' . '}'

    ID      shift, and go to state 43
    INT     shift, and go to state 28
    FLOAT   shift, and go to state 29
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36
    '}'     shift, and go to state 50

    DECLARATION   go to state 51
    COMPOUNDSTMT  go to state 52
    STMT          go to state 53
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 37

   16 FUNCTION: INT ID '(' ')' COMPOUNDSTMT . FUNCTION
   17         | INT ID '(' ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 17 (FUNCTION)

    FUNCTION  go to state 59


State 38

   12 FUNCTION: INT ID '(' PARAMETER ')' . COMPOUNDSTMT FUNCTION
   13         | INT ID '(' PARAMETER ')' . COMPOUNDSTMT

    '{'  shift, and go to state 36

    COMPOUNDSTMT  go to state 60


State 39

   18 FUNCTION: FLOAT ID '(' ')' COMPOUNDSTMT . FUNCTION
   19         | FLOAT ID '(' ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 19 (FUNCTION)

    FUNCTION  go to state 61


State 40

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' . COMPOUNDSTMT FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' . COMPOUNDSTMT

    '{'  shift, and go to state 36

    COMPOUNDSTMT  go to state 62


State 41

    8 IDENTIFIER: ID '[' INTNUM ']' ',' . IDENTIFIER

    ID  shift, and go to state 23

    IDENTIFIER  go to state 63


State 42

   20 PARAMETER: INT IDENTIFIER PARAMETER .

    $default  reduce using rule 20 (PARAMETER)


State 43

   41 ASSIGN: ID . '[' EXPR ']' '=' EXPR
   42       | ID . '=' EXPR
   43 CALL: ID . '(' ARG ')' ';'
   44     | ID . '(' ')' ';'

    '['  shift, and go to state 64
    '('  shift, and go to state 65
    '='  shift, and go to state 66


State 44

   49 FOR_S: FOR . '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT

    '('  shift, and go to state 67


State 45

   48 WHILE_S: WHILE . '(' EXPR ')' STMT

    '('  shift, and go to state 68


State 46

   50 IF_S: IF . '(' EXPR ')' STMT ELSE STMT
   51     | IF . '(' EXPR ')' STMT

    '('  shift, and go to state 69


State 47

   47 WHILE_S: DO . COMPOUNDSTMT WHILE '(' EXPR ')' ';'

    '{'  shift, and go to state 36

    COMPOUNDSTMT  go to state 70


State 48

   30 STMT: RETURN . EXPR ';' STMT
   31     | RETURN . EXPR ';'

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 77
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 49

   40 STMT: ';' .

    $default  reduce using rule 40 (STMT)


State 50

   25 COMPOUNDSTMT: '{' '}' .

    $default  reduce using rule 25 (COMPOUNDSTMT)


State 51

   22 COMPOUNDSTMT: '{' DECLARATION . STMT '}'
   24             | '{' DECLARATION . '}'

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36
    '}'     shift, and go to state 84

    COMPOUNDSTMT  go to state 52
    STMT          go to state 85
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 52

   38 STMT: COMPOUNDSTMT . STMT
   39     | COMPOUNDSTMT .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 39 (STMT)]
    FOR       [reduce using rule 39 (STMT)]
    WHILE     [reduce using rule 39 (STMT)]
    IF        [reduce using rule 39 (STMT)]
    DO        [reduce using rule 39 (STMT)]
    RETURN    [reduce using rule 39 (STMT)]
    ';'       [reduce using rule 39 (STMT)]
    '{'       [reduce using rule 39 (STMT)]
    $default  reduce using rule 39 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 86
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 53

   23 COMPOUNDSTMT: '{' STMT . '}'

    '}'  shift, and go to state 87


State 54

   26 STMT: ASSIGN . ';' STMT
   27     | ASSIGN . ';'

    ';'  shift, and go to state 88


State 55

   28 STMT: CALL . ';' STMT
   29     | CALL . ';'

    ';'  shift, and go to state 89


State 56

   32 STMT: WHILE_S . STMT
   33     | WHILE_S .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 33 (STMT)]
    FOR       [reduce using rule 33 (STMT)]
    WHILE     [reduce using rule 33 (STMT)]
    IF        [reduce using rule 33 (STMT)]
    DO        [reduce using rule 33 (STMT)]
    RETURN    [reduce using rule 33 (STMT)]
    ';'       [reduce using rule 33 (STMT)]
    '{'       [reduce using rule 33 (STMT)]
    $default  reduce using rule 33 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 90
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 57

   34 STMT: FOR_S . STMT
   35     | FOR_S .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 35 (STMT)]
    FOR       [reduce using rule 35 (STMT)]
    WHILE     [reduce using rule 35 (STMT)]
    IF        [reduce using rule 35 (STMT)]
    DO        [reduce using rule 35 (STMT)]
    RETURN    [reduce using rule 35 (STMT)]
    ';'       [reduce using rule 35 (STMT)]
    '{'       [reduce using rule 35 (STMT)]
    $default  reduce using rule 35 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 91
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 58

   36 STMT: IF_S . STMT
   37     | IF_S .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 37 (STMT)]
    FOR       [reduce using rule 37 (STMT)]
    WHILE     [reduce using rule 37 (STMT)]
    IF        [reduce using rule 37 (STMT)]
    DO        [reduce using rule 37 (STMT)]
    RETURN    [reduce using rule 37 (STMT)]
    ';'       [reduce using rule 37 (STMT)]
    '{'       [reduce using rule 37 (STMT)]
    $default  reduce using rule 37 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 92
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 59

   16 FUNCTION: INT ID '(' ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 16 (FUNCTION)


State 60

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT . FUNCTION
   13         | INT ID '(' PARAMETER ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 13 (FUNCTION)

    FUNCTION  go to state 93


State 61

   18 FUNCTION: FLOAT ID '(' ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 18 (FUNCTION)


State 62

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT . FUNCTION
   15         | FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT .

    INT    shift, and go to state 11
    FLOAT  shift, and go to state 12

    $default  reduce using rule 15 (FUNCTION)

    FUNCTION  go to state 94


State 63

    8 IDENTIFIER: ID '[' INTNUM ']' ',' IDENTIFIER .

    $default  reduce using rule 8 (IDENTIFIER)


State 64

   41 ASSIGN: ID '[' . EXPR ']' '=' EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 95
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 65

   43 CALL: ID '(' . ARG ')' ';'
   44     | ID '(' . ')' ';'

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75
    ')'       shift, and go to state 96

    CALL    go to state 76
    ARG     go to state 97
    EXPR    go to state 98
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 66

   42 ASSIGN: ID '=' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 99
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 67

   49 FOR_S: FOR '(' . ASSIGN ';' EXPR ';' ASSIGN ')' STMT

    ID  shift, and go to state 100

    ASSIGN  go to state 101


State 68

   48 WHILE_S: WHILE '(' . EXPR ')' STMT

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 102
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 69

   50 IF_S: IF '(' . EXPR ')' STMT ELSE STMT
   51     | IF '(' . EXPR ')' STMT

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 103
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 70

   47 WHILE_S: DO COMPOUNDSTMT . WHILE '(' EXPR ')' ';'

    WHILE  shift, and go to state 104


State 71

   60 EXPR: INTNUM .

    $default  reduce using rule 60 (EXPR)


State 72

   61 EXPR: FLOATNUM .

    $default  reduce using rule 61 (EXPR)


State 73

   43 CALL: ID . '(' ARG ')' ';'
   44     | ID . '(' ')' ';'
   73 ID_S: ID . EXPR
   74     | ID .

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 105

    $default  reduce using rule 74 (ID_S)

    CALL    go to state 76
    EXPR    go to state 106
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 74

   62 UNOP: UNARY . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 107
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 75

   58 EXPR: '(' . EXPR ')'

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 108
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 76

   57 EXPR: CALL .

    $default  reduce using rule 57 (EXPR)


State 77

   30 STMT: RETURN EXPR . ';' STMT
   31     | RETURN EXPR . ';'
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ';'   shift, and go to state 109
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 78

   52 EXPR: UNOP .

    $default  reduce using rule 52 (EXPR)


State 79

   53 EXPR: ADDIOP .

    $default  reduce using rule 53 (EXPR)


State 80

   54 EXPR: MULTOP .

    $default  reduce using rule 54 (EXPR)


State 81

   55 EXPR: RELAOP .

    $default  reduce using rule 55 (EXPR)


State 82

   56 EXPR: EQLTOP .

    $default  reduce using rule 56 (EXPR)


State 83

   59 EXPR: ID_S .

    $default  reduce using rule 59 (EXPR)


State 84

   24 COMPOUNDSTMT: '{' DECLARATION '}' .

    $default  reduce using rule 24 (COMPOUNDSTMT)


State 85

   22 COMPOUNDSTMT: '{' DECLARATION STMT . '}'

    '}'  shift, and go to state 120


State 86

   38 STMT: COMPOUNDSTMT STMT .

    $default  reduce using rule 38 (STMT)


State 87

   23 COMPOUNDSTMT: '{' STMT '}' .

    $default  reduce using rule 23 (COMPOUNDSTMT)


State 88

   26 STMT: ASSIGN ';' . STMT
   27     | ASSIGN ';' .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 27 (STMT)]
    FOR       [reduce using rule 27 (STMT)]
    WHILE     [reduce using rule 27 (STMT)]
    IF        [reduce using rule 27 (STMT)]
    DO        [reduce using rule 27 (STMT)]
    RETURN    [reduce using rule 27 (STMT)]
    ';'       [reduce using rule 27 (STMT)]
    '{'       [reduce using rule 27 (STMT)]
    $default  reduce using rule 27 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 121
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 89

   28 STMT: CALL ';' . STMT
   29     | CALL ';' .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 29 (STMT)]
    FOR       [reduce using rule 29 (STMT)]
    WHILE     [reduce using rule 29 (STMT)]
    IF        [reduce using rule 29 (STMT)]
    DO        [reduce using rule 29 (STMT)]
    RETURN    [reduce using rule 29 (STMT)]
    ';'       [reduce using rule 29 (STMT)]
    '{'       [reduce using rule 29 (STMT)]
    $default  reduce using rule 29 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 122
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 90

   32 STMT: WHILE_S STMT .

    $default  reduce using rule 32 (STMT)


State 91

   34 STMT: FOR_S STMT .

    $default  reduce using rule 34 (STMT)


State 92

   36 STMT: IF_S STMT .

    $default  reduce using rule 36 (STMT)


State 93

   12 FUNCTION: INT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 12 (FUNCTION)


State 94

   14 FUNCTION: FLOAT ID '(' PARAMETER ')' COMPOUNDSTMT FUNCTION .

    $default  reduce using rule 14 (FUNCTION)


State 95

   41 ASSIGN: ID '[' EXPR . ']' '=' EXPR
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ']'   shift, and go to state 123
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 96

   44 CALL: ID '(' ')' . ';'

    ';'  shift, and go to state 124


State 97

   43 CALL: ID '(' ARG . ')' ';'

    ')'  shift, and go to state 125


State 98

   45 ARG: EXPR . ',' ARG
   46    | EXPR .
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ','   shift, and go to state 126
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    $default  reduce using rule 46 (ARG)


State 99

   42 ASSIGN: ID '=' EXPR .
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    $default  reduce using rule 42 (ASSIGN)


State 100

   41 ASSIGN: ID . '[' EXPR ']' '=' EXPR
   42       | ID . '=' EXPR

    '['  shift, and go to state 64
    '='  shift, and go to state 66


State 101

   49 FOR_S: FOR '(' ASSIGN . ';' EXPR ';' ASSIGN ')' STMT

    ';'  shift, and go to state 127


State 102

   48 WHILE_S: WHILE '(' EXPR . ')' STMT
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ')'   shift, and go to state 128
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 103

   50 IF_S: IF '(' EXPR . ')' STMT ELSE STMT
   51     | IF '(' EXPR . ')' STMT
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ')'   shift, and go to state 129
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 104

   47 WHILE_S: DO COMPOUNDSTMT WHILE . '(' EXPR ')' ';'

    '('  shift, and go to state 130


State 105

   43 CALL: ID '(' . ARG ')' ';'
   44     | ID '(' . ')' ';'
   58 EXPR: '(' . EXPR ')'

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75
    ')'       shift, and go to state 96

    CALL    go to state 76
    ARG     go to state 97
    EXPR    go to state 131
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 106

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR
   73 ID_S: ID EXPR .

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 73 (ID_S)]
    '-'       [reduce using rule 73 (ID_S)]
    '*'       [reduce using rule 73 (ID_S)]
    '/'       [reduce using rule 73 (ID_S)]
    '>'       [reduce using rule 73 (ID_S)]
    '<'       [reduce using rule 73 (ID_S)]
    ">="      [reduce using rule 73 (ID_S)]
    "<="      [reduce using rule 73 (ID_S)]
    "=="      [reduce using rule 73 (ID_S)]
    "!="      [reduce using rule 73 (ID_S)]
    $default  reduce using rule 73 (ID_S)


State 107

   62 UNOP: UNARY EXPR .
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 62 (UNOP)]
    '-'       [reduce using rule 62 (UNOP)]
    '*'       [reduce using rule 62 (UNOP)]
    '/'       [reduce using rule 62 (UNOP)]
    '>'       [reduce using rule 62 (UNOP)]
    '<'       [reduce using rule 62 (UNOP)]
    ">="      [reduce using rule 62 (UNOP)]
    "<="      [reduce using rule 62 (UNOP)]
    "=="      [reduce using rule 62 (UNOP)]
    "!="      [reduce using rule 62 (UNOP)]
    $default  reduce using rule 62 (UNOP)


State 108

   58 EXPR: '(' EXPR . ')'
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ')'   shift, and go to state 132
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 109

   30 STMT: RETURN EXPR ';' . STMT
   31     | RETURN EXPR ';' .

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    ID        [reduce using rule 31 (STMT)]
    FOR       [reduce using rule 31 (STMT)]
    WHILE     [reduce using rule 31 (STMT)]
    IF        [reduce using rule 31 (STMT)]
    DO        [reduce using rule 31 (STMT)]
    RETURN    [reduce using rule 31 (STMT)]
    ';'       [reduce using rule 31 (STMT)]
    '{'       [reduce using rule 31 (STMT)]
    $default  reduce using rule 31 (STMT)

    COMPOUNDSTMT  go to state 52
    STMT          go to state 133
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 110

   63 ADDIOP: EXPR '+' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 134
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 111

   64 ADDIOP: EXPR '-' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 135
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 112

   65 MULTOP: EXPR '*' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 136
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 113

   66 MULTOP: EXPR '/' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 137
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 114

   67 RELAOP: EXPR '>' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 138
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 115

   68 RELAOP: EXPR '<' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 139
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 116

   69 RELAOP: EXPR ">=" . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 140
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 117

   70 RELAOP: EXPR "<=" . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 141
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 118

   71 EQLTOP: EXPR "==" . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 142
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 119

   72 EQLTOP: EXPR "!=" . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 143
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 120

   22 COMPOUNDSTMT: '{' DECLARATION STMT '}' .

    $default  reduce using rule 22 (COMPOUNDSTMT)


State 121

   26 STMT: ASSIGN ';' STMT .

    $default  reduce using rule 26 (STMT)


State 122

   28 STMT: CALL ';' STMT .

    $default  reduce using rule 28 (STMT)


State 123

   41 ASSIGN: ID '[' EXPR ']' . '=' EXPR

    '='  shift, and go to state 144


State 124

   44 CALL: ID '(' ')' ';' .

    $default  reduce using rule 44 (CALL)


State 125

   43 CALL: ID '(' ARG ')' . ';'

    ';'  shift, and go to state 145


State 126

   45 ARG: EXPR ',' . ARG

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    ARG     go to state 146
    EXPR    go to state 98
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 127

   49 FOR_S: FOR '(' ASSIGN ';' . EXPR ';' ASSIGN ')' STMT

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 147
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 128

   48 WHILE_S: WHILE '(' EXPR ')' . STMT

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    COMPOUNDSTMT  go to state 52
    STMT          go to state 148
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 129

   50 IF_S: IF '(' EXPR ')' . STMT ELSE STMT
   51     | IF '(' EXPR ')' . STMT

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    COMPOUNDSTMT  go to state 52
    STMT          go to state 149
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 130

   47 WHILE_S: DO COMPOUNDSTMT WHILE '(' . EXPR ')' ';'

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 150
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 131

   45 ARG: EXPR . ',' ARG
   46    | EXPR .
   58 EXPR: '(' EXPR . ')'
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ','   shift, and go to state 126
    ')'   shift, and go to state 132
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    ')'  [reduce using rule 46 (ARG)]


State 132

   58 EXPR: '(' EXPR ')' .

    $default  reduce using rule 58 (EXPR)


State 133

   30 STMT: RETURN EXPR ';' STMT .

    $default  reduce using rule 30 (STMT)


State 134

   63 ADDIOP: EXPR . '+' EXPR
   63       | EXPR '+' EXPR .
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 63 (ADDIOP)]
    '-'       [reduce using rule 63 (ADDIOP)]
    '*'       [reduce using rule 63 (ADDIOP)]
    '/'       [reduce using rule 63 (ADDIOP)]
    '>'       [reduce using rule 63 (ADDIOP)]
    '<'       [reduce using rule 63 (ADDIOP)]
    ">="      [reduce using rule 63 (ADDIOP)]
    "<="      [reduce using rule 63 (ADDIOP)]
    "=="      [reduce using rule 63 (ADDIOP)]
    "!="      [reduce using rule 63 (ADDIOP)]
    $default  reduce using rule 63 (ADDIOP)


State 135

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   64       | EXPR '-' EXPR .
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 64 (ADDIOP)]
    '-'       [reduce using rule 64 (ADDIOP)]
    '*'       [reduce using rule 64 (ADDIOP)]
    '/'       [reduce using rule 64 (ADDIOP)]
    '>'       [reduce using rule 64 (ADDIOP)]
    '<'       [reduce using rule 64 (ADDIOP)]
    ">="      [reduce using rule 64 (ADDIOP)]
    "<="      [reduce using rule 64 (ADDIOP)]
    "=="      [reduce using rule 64 (ADDIOP)]
    "!="      [reduce using rule 64 (ADDIOP)]
    $default  reduce using rule 64 (ADDIOP)


State 136

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   65       | EXPR '*' EXPR .
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 65 (MULTOP)]
    '-'       [reduce using rule 65 (MULTOP)]
    '*'       [reduce using rule 65 (MULTOP)]
    '/'       [reduce using rule 65 (MULTOP)]
    '>'       [reduce using rule 65 (MULTOP)]
    '<'       [reduce using rule 65 (MULTOP)]
    ">="      [reduce using rule 65 (MULTOP)]
    "<="      [reduce using rule 65 (MULTOP)]
    "=="      [reduce using rule 65 (MULTOP)]
    "!="      [reduce using rule 65 (MULTOP)]
    $default  reduce using rule 65 (MULTOP)


State 137

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   66       | EXPR '/' EXPR .
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 66 (MULTOP)]
    '-'       [reduce using rule 66 (MULTOP)]
    '*'       [reduce using rule 66 (MULTOP)]
    '/'       [reduce using rule 66 (MULTOP)]
    '>'       [reduce using rule 66 (MULTOP)]
    '<'       [reduce using rule 66 (MULTOP)]
    ">="      [reduce using rule 66 (MULTOP)]
    "<="      [reduce using rule 66 (MULTOP)]
    "=="      [reduce using rule 66 (MULTOP)]
    "!="      [reduce using rule 66 (MULTOP)]
    $default  reduce using rule 66 (MULTOP)


State 138

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   67       | EXPR '>' EXPR .
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 67 (RELAOP)]
    '-'       [reduce using rule 67 (RELAOP)]
    '*'       [reduce using rule 67 (RELAOP)]
    '/'       [reduce using rule 67 (RELAOP)]
    '>'       [reduce using rule 67 (RELAOP)]
    '<'       [reduce using rule 67 (RELAOP)]
    ">="      [reduce using rule 67 (RELAOP)]
    "<="      [reduce using rule 67 (RELAOP)]
    "=="      [reduce using rule 67 (RELAOP)]
    "!="      [reduce using rule 67 (RELAOP)]
    $default  reduce using rule 67 (RELAOP)


State 139

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   68       | EXPR '<' EXPR .
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 68 (RELAOP)]
    '-'       [reduce using rule 68 (RELAOP)]
    '*'       [reduce using rule 68 (RELAOP)]
    '/'       [reduce using rule 68 (RELAOP)]
    '>'       [reduce using rule 68 (RELAOP)]
    '<'       [reduce using rule 68 (RELAOP)]
    ">="      [reduce using rule 68 (RELAOP)]
    "<="      [reduce using rule 68 (RELAOP)]
    "=="      [reduce using rule 68 (RELAOP)]
    "!="      [reduce using rule 68 (RELAOP)]
    $default  reduce using rule 68 (RELAOP)


State 140

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   69       | EXPR ">=" EXPR .
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 69 (RELAOP)]
    '-'       [reduce using rule 69 (RELAOP)]
    '*'       [reduce using rule 69 (RELAOP)]
    '/'       [reduce using rule 69 (RELAOP)]
    '>'       [reduce using rule 69 (RELAOP)]
    '<'       [reduce using rule 69 (RELAOP)]
    ">="      [reduce using rule 69 (RELAOP)]
    "<="      [reduce using rule 69 (RELAOP)]
    "=="      [reduce using rule 69 (RELAOP)]
    "!="      [reduce using rule 69 (RELAOP)]
    $default  reduce using rule 69 (RELAOP)


State 141

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   70       | EXPR "<=" EXPR .
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 70 (RELAOP)]
    '-'       [reduce using rule 70 (RELAOP)]
    '*'       [reduce using rule 70 (RELAOP)]
    '/'       [reduce using rule 70 (RELAOP)]
    '>'       [reduce using rule 70 (RELAOP)]
    '<'       [reduce using rule 70 (RELAOP)]
    ">="      [reduce using rule 70 (RELAOP)]
    "<="      [reduce using rule 70 (RELAOP)]
    "=="      [reduce using rule 70 (RELAOP)]
    "!="      [reduce using rule 70 (RELAOP)]
    $default  reduce using rule 70 (RELAOP)


State 142

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   71       | EXPR "==" EXPR .
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 71 (EQLTOP)]
    '-'       [reduce using rule 71 (EQLTOP)]
    '*'       [reduce using rule 71 (EQLTOP)]
    '/'       [reduce using rule 71 (EQLTOP)]
    '>'       [reduce using rule 71 (EQLTOP)]
    '<'       [reduce using rule 71 (EQLTOP)]
    ">="      [reduce using rule 71 (EQLTOP)]
    "<="      [reduce using rule 71 (EQLTOP)]
    "=="      [reduce using rule 71 (EQLTOP)]
    "!="      [reduce using rule 71 (EQLTOP)]
    $default  reduce using rule 71 (EQLTOP)


State 143

   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR
   72       | EXPR "!=" EXPR .

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    '+'       [reduce using rule 72 (EQLTOP)]
    '-'       [reduce using rule 72 (EQLTOP)]
    '*'       [reduce using rule 72 (EQLTOP)]
    '/'       [reduce using rule 72 (EQLTOP)]
    '>'       [reduce using rule 72 (EQLTOP)]
    '<'       [reduce using rule 72 (EQLTOP)]
    ">="      [reduce using rule 72 (EQLTOP)]
    "<="      [reduce using rule 72 (EQLTOP)]
    "=="      [reduce using rule 72 (EQLTOP)]
    "!="      [reduce using rule 72 (EQLTOP)]
    $default  reduce using rule 72 (EQLTOP)


State 144

   41 ASSIGN: ID '[' EXPR ']' '=' . EXPR

    INTNUM    shift, and go to state 71
    FLOATNUM  shift, and go to state 72
    ID        shift, and go to state 73
    UNARY     shift, and go to state 74
    '('       shift, and go to state 75

    CALL    go to state 76
    EXPR    go to state 151
    UNOP    go to state 78
    ADDIOP  go to state 79
    MULTOP  go to state 80
    RELAOP  go to state 81
    EQLTOP  go to state 82
    ID_S    go to state 83


State 145

   43 CALL: ID '(' ARG ')' ';' .

    $default  reduce using rule 43 (CALL)


State 146

   45 ARG: EXPR ',' ARG .

    $default  reduce using rule 45 (ARG)


State 147

   49 FOR_S: FOR '(' ASSIGN ';' EXPR . ';' ASSIGN ')' STMT
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ';'   shift, and go to state 152
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 148

   48 WHILE_S: WHILE '(' EXPR ')' STMT .

    $default  reduce using rule 48 (WHILE_S)


State 149

   50 IF_S: IF '(' EXPR ')' STMT . ELSE STMT
   51     | IF '(' EXPR ')' STMT .

    ELSE  shift, and go to state 153

    ELSE      [reduce using rule 51 (IF_S)]
    $default  reduce using rule 51 (IF_S)


State 150

   47 WHILE_S: DO COMPOUNDSTMT WHILE '(' EXPR . ')' ';'
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    ')'   shift, and go to state 154
    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119


State 151

   41 ASSIGN: ID '[' EXPR ']' '=' EXPR .
   63 ADDIOP: EXPR . '+' EXPR
   64       | EXPR . '-' EXPR
   65 MULTOP: EXPR . '*' EXPR
   66       | EXPR . '/' EXPR
   67 RELAOP: EXPR . '>' EXPR
   68       | EXPR . '<' EXPR
   69       | EXPR . ">=" EXPR
   70       | EXPR . "<=" EXPR
   71 EQLTOP: EXPR . "==" EXPR
   72       | EXPR . "!=" EXPR

    '+'   shift, and go to state 110
    '-'   shift, and go to state 111
    '*'   shift, and go to state 112
    '/'   shift, and go to state 113
    '>'   shift, and go to state 114
    '<'   shift, and go to state 115
    ">="  shift, and go to state 116
    "<="  shift, and go to state 117
    "=="  shift, and go to state 118
    "!="  shift, and go to state 119

    $default  reduce using rule 41 (ASSIGN)


State 152

   49 FOR_S: FOR '(' ASSIGN ';' EXPR ';' . ASSIGN ')' STMT

    ID  shift, and go to state 100

    ASSIGN  go to state 155


State 153

   50 IF_S: IF '(' EXPR ')' STMT ELSE . STMT

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    COMPOUNDSTMT  go to state 52
    STMT          go to state 156
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 154

   47 WHILE_S: DO COMPOUNDSTMT WHILE '(' EXPR ')' . ';'

    ';'  shift, and go to state 157


State 155

   49 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN . ')' STMT

    ')'  shift, and go to state 158


State 156

   50 IF_S: IF '(' EXPR ')' STMT ELSE STMT .

    $default  reduce using rule 50 (IF_S)


State 157

   47 WHILE_S: DO COMPOUNDSTMT WHILE '(' EXPR ')' ';' .

    $default  reduce using rule 47 (WHILE_S)


State 158

   49 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' . STMT

    ID      shift, and go to state 43
    FOR     shift, and go to state 44
    WHILE   shift, and go to state 45
    IF      shift, and go to state 46
    DO      shift, and go to state 47
    RETURN  shift, and go to state 48
    ';'     shift, and go to state 49
    '{'     shift, and go to state 36

    COMPOUNDSTMT  go to state 52
    STMT          go to state 159
    ASSIGN        go to state 54
    CALL          go to state 55
    WHILE_S       go to state 56
    FOR_S         go to state 57
    IF_S          go to state 58


State 159

   49 FOR_S: FOR '(' ASSIGN ';' EXPR ';' ASSIGN ')' STMT .

    $default  reduce using rule 49 (FOR_S)
